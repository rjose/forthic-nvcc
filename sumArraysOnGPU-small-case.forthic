[ cuda ch2 ] USE-MODULES

: NUM-ELEMS   1 5 << ;
: NUM-BYTES   NUM-ELEMS FLOAT SIZEOF * ;

[ "h_A" "h_B" "h_C" "hostRef" "gpuRef" ] VARIABLES
[ "d_A" "d_B" "d_C" ] VARIABLES

: h_A!       NUM-BYTES MALLOC h_A !  h_A @ NUM-ELEMS INIT-DATA ;
: h_B!       NUM-BYTES MALLOC h_B !  h_B @ NUM-ELEMS INIT-DATA ;
: h_C!       NUM-BYTES MALLOC h_C ! ;
: hostRef!   NUM-BYTES MALLOC hostRef !  hostRef @ 0 NUM-BYTES MEMSET ;
: gpuRef!    NUM-BYTES MALLOC gpuRef !   gpuRef  @ 0 NUM-BYTES MEMSET ;
: d_A!       FLOAT NUM-BYTES CUDA-MALLOC d_A ! ;
: d_B!       FLOAT NUM-BYTES CUDA-MALLOC d_B ! ;
: d_C!       FLOAT NUM-BYTES CUDA-MALLOC d_C ! ;
: INIT-DEV   0 CUDA-SET-DEVICE ;
: INIT-DATA  h_A! 1000 MSLEEP h_B! h_C! hostRef! gpuRef! d_A! d_B! d_C! ;
: INIT       INIT-DEV INIT-DATA ;

# Run code
INIT

h_A @  h_B @  h_C @ NUM-ELEMS  H-SUM-ARRAYS

"Host: A" PRINT
h_A @ 0 NUM-ELEMS FLOAT PRINT-MEM
ENDL PRINT

[ ENDL "Host: B" ] CONCAT PRINT
h_B @ 0 NUM-ELEMS FLOAT PRINT-MEM
ENDL PRINT

[ ENDL "Host: C" ] CONCAT PRINT
h_C @ 0 NUM-ELEMS FLOAT PRINT-MEM

h_A @ FREE
h_B @ FREE
h_C @ FREE

# C Code ===============================================================================
# int main(int argc, char **argv)
# {
#     // transfer data from host to device
#     CHECK(cudaMemcpy(d_A, h_A, nBytes, cudaMemcpyHostToDevice));
#     CHECK(cudaMemcpy(d_B, h_B, nBytes, cudaMemcpyHostToDevice));
#     CHECK(cudaMemcpy(d_C, gpuRef, nBytes, cudaMemcpyHostToDevice));
# 
#     // invoke kernel at host side
#     dim3 block (nElem);
#     dim3 grid  (1);
# 
#     sumArraysOnGPU<<<grid, block>>>(d_A, d_B, d_C, nElem);
#     printf("Execution configure <<<%d, %d>>>\n", grid.x, block.x);
# 
#     // copy kernel result back to host side
#     CHECK(cudaMemcpy(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost));
# 
#     // add vector at host side for result checks
#     sumArraysOnHost(h_A, h_B, hostRef, nElem);
# 
#     // check device results
#     checkResult(hostRef, gpuRef, nElem);
# 
#     // free device global memory
#     CHECK(cudaFree(d_A));
#     CHECK(cudaFree(d_B));
#     CHECK(cudaFree(d_C));
# 
#     // free host memory
#     free(h_A);
#     free(h_B);
#     free(hostRef);
#     free(gpuRef);
# 
#     CHECK(cudaDeviceReset());
#     return(0);
# }
